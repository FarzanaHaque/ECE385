module testbench_ripple_adder();

timeunit 10ns;
timeprecision 1ns;

     logic           Clk;      // 50MHz clock is only used to get timing estimate data
    logic           Reset;      // From push-button 0.  Remember the button is active low (0 when pressed)
    logic           LoadB;      // From push-button 1
    logic           Run;        // From push-button 3.
    logic[15:0]     SW;         // From slider switches
    
    // all outputs
    logic           CO;        // Carry-out.  Goes to the green LED to the left of the hex displays.
    logic[15:0]     Sum;      // Goes to the red LEDs.  You need to press "Run" before the sum shows up here.
    logic[6:0]      Ahex0;      // Hex drivers display both inputs to the adder.
    logic[6:0]      Ahex1;
    logic[6:0]      Ahex2;
    logic[6:0]      Ahex3;
    logic[6:0]      Bhex0;
    logic[6:0]      Bhex1;
    logic[6:0]      Bhex2;
    logic[6:0]      Bhex3;
     
     logic error_cnt; //increments if tests are not passed
     
lab4_adders_toplevel ripple_adder(.*);

always begin : CLOCK_GENERATION
#1 Clk = ~Clk;
end

initial begin: CLOCK_INITIALIZATION
    Clk = 0;
end 

initial begin: TEST_VECTORS

error_cnt = 0;
Run = 1;
Reset = 0; //Reset registers

#2 Reset=1;
LoadB = 0;
SW = 16'h0001;  //Load x01 into A

#2 LoadB = 1;
SW = 16'h0002; //Load x02 into B

#2 Run = 0; //Start execution

#22;
Run = 1; //stop execution
if(Sum != 16'h0003) error_cnt++; //increment error_cnt if result is incorrect

LoadB = 0;
SW = 16'h00AB;  //Load xAB into A

#2 LoadB = 1;
SW = 16'h0023; //Load x23 into B

#2 Run = 0; //Start execution

#22;
Run = 1; //stop execution
if(Sum != 16'h00CE) error_cnt++; //increment error_cnt if result is incorrect

LoadB = 0;
SW = 16'hFFFF;  //Load xAB into A

#2 LoadB = 1;
SW = 16'h0001; //Load x23 into B

#2 Run = 0; //Start execution

#22;
Run = 1; //stop execution
if(Sum != 16'h0000) error_cnt++; //increment error_cnt if result is incorrect

end

endmodule
